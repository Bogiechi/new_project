stages:
  # CI pipeline
  # 一般開發流程
  # test 測試過了 -> 
  #   merge 進 stage/master -> 
  #   build 建立 docker image ->
  #   deploy 部屬服務
  # 會根據此順序依序進行
  # test -> build -> deploy
  - test
  - build
  - deploy

# CI 名稱，test 步驟
test-crawler: 
    # 在 stage 設定 CI pipeline 順序
    # 這裡 pipeline 步驟是 test
    stage: test
    # 運行測試的 docker image
    # 由於我們 Dockerfile 基於
    # ubuntu:18.04 下去做設定
    # 因此這裡測試也使用同樣的 image
    
    # 本書前一版使用 continuumio/miniconda3:4.3.27
    # 但此 image 中的 Linux 系統 - Debian 版本太舊
    # 因此改用 ubuntu 系統
    image: ubuntu:22.04
    before_script:
      # 測試事前準備的指令
      # 需要先安裝環境
      - apt-get update && apt-get install python3.10 -y && apt-get install python3-pip -y && apt-get install curl -y
      - curl -sSL https://install.python-poetry.org | python3 -
      - export PATH=$PATH:$HOME/.local/bin
      - export LC_ALL=C.UTF-8 LANG=C.UTF-8
      - poetry lock
      - poetry install
      - VERSION=RELEASE poetry run python genenv.py
    script:
      # 實際測試指令
      - poetry run pytest --cov-report term-missing --cov-config=.coveragerc --cov=./vtuberdata/ tests/
    only:
        # 設定只有在 merge requests 的情況下
        # 才會運作此 CI
        refs:
          - merge_requests